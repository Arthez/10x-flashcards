name: Deploy to Production

on:
  workflow_dispatch:

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint

  unit-test:
    name: Unit Tests
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests with coverage
        run: npm run test:coverage
        
      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: test/reports/coverage/
          retention-days: 14

  build-and-deploy:
    name: Build and Deploy
    needs: [lint, unit-test]
    runs-on: ubuntu-latest
    environment: Prod
    permissions:
      contents: read
      deployments: write
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
 
      - name: Build project
        run: npm run build
        
      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy dist --project-name=10x-flashcards

  deployment-status:
    name: Update Deployment Status
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Create deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const buildSuccess = '${{ needs.build-and-deploy.result }}' === 'success';
            const statusEmoji = buildSuccess ? '✅' : '❌';
            const statusText = buildSuccess ? 'Deployment successful!' : 'Deployment failed';
            
            const message = `## Deployment Status ${statusEmoji}\n\n` +
              `${statusText}\n\n` +
              `### Pipeline Results:\n` +
              `- Lint: ✅\n` +
              `- Unit Tests: ✅\n` +
              `- Build & Deploy: ${buildSuccess ? '✅' : '❌'}\n\n` +
              `Test coverage reports are available in artifacts.`;
            
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: message
            }); 
